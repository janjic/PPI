imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }
    - { resource: admin/ }
# Put parameters here that don't need to change on each machine where the app is deployed
# http://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: en
    app.path.ppi_images: /uploads/base/images
    app.path.product_images: /uploads/images/products
    app.path.user_contracts: /uploads/files/user/contracts
    app.path.user_images: /uploads/files/user/images

framework:
    #esi:             ~
    translator:      { fallbacks: ['%locale%', 'en'] }
    secret:          '%secret%'
    router:
        resource: '%kernel.root_dir%/config/routing.yml'
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    templating:
        engines: ['twig']
        #assets_version: SomeVersionScheme
    default_locale:  '%locale%'
    trusted_hosts:   ~
    trusted_proxies: ~
    session:
        # handler_id set to null will use default session handler from php.ini
        handler_id:  ~
    fragments:       ~
    http_method_override: true
    assets: ~

# Twig Configuration
twig:
    debug:            '%kernel.debug%'
    strict_variables: '%kernel.debug%'
    form_themes:
            - 'forms/fields.html.twig'
#            - 'forms/materialize.html.twig'

# Doctrine Configuration
doctrine:
    dbal:
        url: '%database_url%'
        charset:  UTF8
        server_version: 5.6
    orm:
        auto_generate_proxy_classes: '%kernel.debug%'
        naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: true
        mappings:
          gedmo_tree:
            type: annotation
            prefix: Gedmo\Tree\Entity
            dir: "%kernel.root_dir%/../vendor/gedmo/doctrine-extensions/lib/Gedmo/Tree/Entity"
            alias: GedmoTree # this one is optional and will default to the name set for the mapping
            is_bundle: false


# File Uploader
vich_uploader:
    db_driver: orm
    mappings:
        product_images:
            uri_prefix: '%app.path.product_images%'
            upload_destination: '%kernel.root_dir%/../web/uploads/images/products'
        user_images:
          uri_prefix: '%app.path.user_images%'
          upload_destination: '%kernel.root_dir%/../web/uploads/images/products'
        user_contracts:
            uri_prefix: '%app.path.user_contracts%'
            upload_destination: '%kernel.root_dir%/../web/uploads/files/user/contracts'
        base_images:
            uri_prefix: '%app.path.ppi_images%'
            upload_destination: '%kernel.root_dir%/../web/uploads/base/images'
            namer:
                service: vich_uploader.namer_uniqid

fos_user:
    db_driver: orm
    firewall_name: main
    user_class: AppBundle\Entity\User
    from_email:
      address: you@example.com
      sender_name: You

swiftmailer:
    transport: null
    host:      null
    username:  null
    password:  null
    spool:     { type: memory }

stof_doctrine_extensions:
    orm:
        default:
            tree: true

glavweb_uploader:
    mappings:
        entity_images:
            providers :
                - "glavweb_uploader.provider.image"
            use_orphanage: true
            upload_directory:     "%kernel.root_dir%/../web/uploads/entity_images"
            upload_directory_url: "uploads/entity_images"
            max_size: 4194304 # 4Mb
        entity_videos:
            providers :
                - "glavweb_uploader.provider.image"
            use_orphanage: true
            upload_directory:     "%kernel.root_dir%/../web/uploads/entity_videos"
            upload_directory_url: "uploads/entity_videos"
            max_size: 400194304 # 4Mb
            allowed_mimetypes: ['video/*']

    orphanage:
        lifetime: 86400
        directory: "%kernel.cache_dir%/uploader/orphanage"

liip_imagine:
    resolvers:
        default:
            web_path: ~

    filter_sets:
        cache: ~

        # the name of the "filter set"
        my_thumb:

            # adjust the image quality to 75%
            quality: 75

            # list of transformations to apply (the "filters")
            filters:

                # create a thumbnail: set size to 120x90 and use the "outbound" mode
                # to crop the image when the size ratio of the input differs
                thumbnail: { size: [120, 90], mode: outbound }

                # create a 2px black border: center the thumbnail on a black background
                # 4px larger to create a 2px border around the final image
                background: { size: [124, 94], position: center, color: '#000000' }